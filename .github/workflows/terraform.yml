name: Terraform API Request

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      use_terraform_hcp:
        description: "Run using Terraform Cloud (HCP)?"
        required: false
        default: "false"

permissions:
  contents: write

jobs:
  get_repo_name:
    runs-on: ubuntu-latest
    outputs:
      sanitized_repo_name: ${{ steps.sanitize_repo.outputs.sanitized_repo_name }}
    steps:
      - name: Extract and Sanitize Repository Name
        id: sanitize_repo
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          SANITIZED_NAME=$(echo "$REPO_NAME" | tr '.' '-')
          echo "sanitized_repo_name=$SANITIZED_NAME" >> "$GITHUB_OUTPUT"

  create_workspace:
    if: ${{ github.event.inputs.use_terraform_hcp == 'false' || github.event.inputs.use_terraform_hcp == '' }}
    outputs:
      sanitized_repo_name: ${{ needs.get_repo_name.outputs.sanitized_repo_name }}
    runs-on: ubuntu-latest
    needs: get_repo_name
    steps:
      - name: Check if workspace exists
        id: check_workspace
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          ORGANIZATION_NAME: veloso
          WORKSPACE_NAME: ${{ needs.get_repo_name.outputs.sanitized_repo_name }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/workspaces/$WORKSPACE_NAME" \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json")

          if [[ "$response" -eq 200 ]]; then
            echo "Workspace $WORKSPACE_NAME already exists."
            echo "exists=true" | tee -a $GITHUB_ENV
          elif [[ "$response" -eq 404 ]]; then
            echo "Workspace $WORKSPACE_NAME does not exist, creating now."
            echo "exists=false" | tee -a $GITHUB_ENV
          else
            echo "Error checking workspace status. Response code: $response"
            exit 1
          fi

      - name: Create a Workspace Terraform HCP
        if: ${{ env.exists == 'false' }}
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          OAUTH_TOKEN_ID: ${{ secrets.OAUTH_TOKEN_ID }}
          ORGANIZATION_NAME: veloso
          WORKSPACE_NAME: ${{ needs.get_repo_name.outputs.sanitized_repo_name }}
        run: |
          curl -X POST "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/workspaces" \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{
              "data": {
                "type": "workspaces",
                "attributes": {
                  "name": "'$WORKSPACE_NAME'",  
                  "terraform_version": "1.6.0",
                  "file-triggers-enabled": false,
                  "auto-apply": false,
                  "speculative-enabled": true,
                  "queue-all-runs": true,
                  "working-directory": "",
                  "vcs-repo": {
                    "identifier": "rafaveloso23/'$WORKSPACE_NAME'", 
                    "oauth-token-id": "'$OAUTH_TOKEN_ID'",
                    "tags-regex": "null",
                    "branch": ""
                  }
                },
                "relationships": {
                  "project": {
                    "data": {
                      "type": "projects",
                      "id": "prj-Q9eBYAsfU5yYxbBF"
                    }
                  }
                }
              }
            }'

  Workspace_Access:
    if: ${{ github.event.inputs.use_terraform_hcp == 'false' || github.event.inputs.use_terraform_hcp == '' }}
    runs-on: ubuntu-latest
    needs: create_workspace
    steps:
      - name: Echo Workspace Access URL
        env:
          WORKSPACE_NAME: ${{ needs.create_workspace.outputs.sanitized_repo_name }}
          ORGANIZATION_NAME: veloso
        run: |
          echo "The workspace for your repository has been successfully created."
          echo "You can now access the workspace VCS and initiate the plan to test your infrastructure code."
          echo ""
          echo "Workspace Access URL:"
          echo "https://app.terraform.io/app/${{ env.ORGANIZATION_NAME }}/workspaces/${{ env.WORKSPACE_NAME }}"
          echo ""
          echo "Please proceed with the necessary actions to validate your changes and trigger the execution."

  terraform_hcp:
    if: ${{ github.event.inputs.use_terraform_hcp == 'true' }}
    runs-on: ubuntu-latest
    needs: get_repo_name
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Inject Terraform Cloud Configuration
        run: |
          cat <<EOF > providers.tf
          terraform {
            cloud {
              organization = "veloso"
              hostname     = "app.terraform.io"

              workspaces {
                project = "Default Project"
                name    = "${{ needs.get_repo_name.outputs.sanitized_repo_name }}"
              }
            }
          }
          EOF

      - name: Initialize Terraform
        run: terraform init

      - name: Plan Terraform
        run: terraform plan
