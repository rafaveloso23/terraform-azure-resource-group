name: Terraform API Request

on:
  pull_request:
    types:
      - closed
    branches:
      - main
  workflow_dispatch:
    inputs:
      publish:
        description: "Do you want to publish your Terraform module?"
        required: true
        default: "no"
        type: choice
        options:
          - "yes"
          - "no"

jobs:
  get_repo_name:
    runs-on: ubuntu-latest
    outputs:
      sanitized_repo_name: ${{ steps.sanitize_repo.outputs.sanitized_repo_name }}
    steps:
      - name: Extract and Sanitize Repository Name
        id: sanitize_repo
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          SANITIZED_NAME=$(echo "$REPO_NAME" | tr '.' '-')
          echo "sanitized_repo_name=$SANITIZED_NAME" >> "$GITHUB_OUTPUT"

  create_workspace:
    outputs:
      sanitized_repo_name: ${{ needs.get_repo_name.outputs.sanitized_repo_name }}
    runs-on: ubuntu-latest
    needs: get_repo_name
    steps:
      - name: Check if workspace exists
        id: check_workspace
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          ORGANIZATION_NAME: veloso
          WORKSPACE_NAME: ${{ needs.get_repo_name.outputs.sanitized_repo_name }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/workspaces/$WORKSPACE_NAME" \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json")
          
          if [[ "$response" -eq 200 ]]; then
            echo "Workspace $WORKSPACE_NAME already exists."
            echo "exists=true" >> $GITHUB_ENV
          elif [[ "$response" -eq 404 ]]; then
            echo "Workspace $WORKSPACE_NAME does not exist, creating now."
            echo "exists=false" >> $GITHUB_ENV
          else
            echo "Error checking workspace status. Response code: $response"
            exit 1
          fi

      - name: Create a Workspace Terraform HCP
        if: ${{ env.exists == 'false' }}
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          OAUTH_TOKEN_ID: ${{ secrets.OAUTH_TOKEN_ID }}
          ORGANIZATION_NAME: veloso
          WORKSPACE_NAME: ${{ needs.get_repo_name.outputs.sanitized_repo_name }}
        run: |
          curl -X POST "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/workspaces" \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{
              "data": {
                "type": "workspaces",
                "attributes": {
                  "name": "'"$WORKSPACE_NAME"'",  
                  "terraform_version": "1.6.0",
                  "file-triggers-enabled": false,
                  "working-directory": "",
                  "vcs-repo": {
                    "identifier": "rafaveloso23/'"$WORKSPACE_NAME"'", 
                    "oauth-token-id": "'"$OAUTH_TOKEN_ID"'",
                    "tags-regex": "\\d+\\.\\d+\\.\\d+"
                  }
                },
                "relationships": {
                  "project": {
                    "data": {
                      "type": "projects",
                      "id": "prj-Q9eBYAsfU5yYxbBF"
                    }
                  }
                }
              }
            }'
          
      - name: Echo Workspace Access URL
        env:
          WORKSPACE_NAME: ${{ needs.get_repo_name.outputs.sanitized_repo_name }}
          ORGANIZATION_NAME: veloso
        run: |
          echo "The workspace for your repository has been successfully created."
          echo "You can now access the workspace VCS and initiate the plan to test your infrastructure code."
          echo ""
          echo "Workspace Access URL:"
          echo "https://app.terraform.io/app/${{ env.ORGANIZATION_NAME }}/workspaces/${{ env.WORKSPACE_NAME }}"
          echo ""
          echo "Please proceed with the necessary actions to validate your changes and trigger the execution."

  check_merge_status:
    runs-on: ubuntu-latest
    outputs:
      merged: ${{ steps.check_merge.outputs.merged }}
    steps:
      - name: Check if PR was merged
        id: check_merge
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "Pull request was merged!"
            echo "merged=true" >> $GITHUB_ENV
            echo "merged=true" >> $GITHUB_OUTPUT
          else
            echo "Pull request was closed without merging."
            echo "merged=false" >> $GITHUB_ENV
            echo "merged=false" >> $GITHUB_OUTPUT
          
  add_new_tag:
    name: Add New Tag
    runs-on: ubuntu-latest
    needs: check_merge_status
    if: needs.check_merge_status.outputs.merged == 'true'  # Only runs if PR was merged
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures all tags are available

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $LATEST_TAG"
          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v1.0.0"
          else
            IFS='.' read -r -a TAG_PARTS <<< "${LATEST_TAG//v/}"
            PATCH=$((TAG_PARTS[2] + 1))
            NEW_TAG="v${TAG_PARTS[0]}.${TAG_PARTS[1]}.$PATCH"
          fi
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and Push New Tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG 
 
          


  publish_hcp_module:
    name: Publish Terraform Module
    runs-on: ubuntu-latest
    needs: [check_merge_status, add_new_tag]
    if: needs.check_merge_status.outputs.merged == 'true'
    steps:
      - name: Conditional POST API Request to Publish Module
        env:
          TF_API_TEAM_TOKEN: ${{ secrets.TF_API_TEAM_TOKEN }}
          OAUTH_TOKEN_ID: ${{ secrets.OAUTH_TOKEN_ID }}
          ORGANIZATION_NAME: veloso
          WORKSPACE_NAME: ${{ needs.create_workspace.outputs.sanitized_repo_name }}

        run: |
          curl -X POST "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/registry-modules/vcs" \
            -H "Authorization: Bearer $TF_API_TEAM_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{
              "data": {
                "attributes": {
                  "vcs-repo": {
                    "identifier": "rafaveloso23/'"$WORKSPACE_NAME"'", 
                    "oauth-token-id": "'"$OAUTH_TOKEN_ID"'",
                    "display_identifier": "rafaveloso23/'"$WORKSPACE_NAME"'", 
                    "branch": ""
                  },
                  "no-code": false
                },
                "type": "registry-modules"
              }
            }'