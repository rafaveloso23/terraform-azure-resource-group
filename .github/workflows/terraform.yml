name: Terraform API Request
on:
  pull_request:
    branches:
      - main

jobs:
  get-repo-name:
    runs-on: ubuntu-latest
    outputs:
      sanitized_repo_name: ${{ steps.sanitize_repo.outputs.sanitized_repo_name }}
    steps:
      - name: Extract and Sanitize Repository Name
        id: sanitize_repo
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          SANITIZED_NAME=$(echo "$REPO_NAME" | tr '.' '-')
          echo "sanitized_repo_name=$SANITIZED_NAME" >> "$GITHUB_OUTPUT"

  api_request:
    runs-on: ubuntu-latest
    outputs:
      workspace_id: ${{ steps.make_api_request.outputs.workspace_id }}
    needs: get-repo-name
    steps:
      - name: Make API Request
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          TF_API_TEAM_TOKEN: ${{ secrets.TF_API_TEAM_TOKEN }}
          OAUTH_TOKEN: ${{ secrets.OAUTH_TOKEN }}
          WORKSPACE_NAME: ${{ needs.get-repo-name.outputs.sanitized_repo_name }}
        run: |
          GET_RESPONSE=$(curl -s -o get_response.json -w "%{http_code}" -X GET "https://app.terraform.io/api/v2/organizations/veloso/workspaces/$WORKSPACE_NAME" \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json")

          if [ "$GET_RESPONSE" -eq 200 ]; then
            echo "Workspace already exists."
            WORKSPACE_ID=$(jq -r '.data.id' get_response.json)
          else
            echo "Workspace does not exist. Creating it now..."

            CREATE_RESPONSE=$(curl -s -X POST "https://app.terraform.io/api/v2/organizations/veloso/workspaces" \
              -H "Authorization: Bearer $TF_API_TOKEN" \
              -H "Accept: application/json" \
              -H "Content-Type: application/vnd.api+json" \
              -d '{
                "data": {
                  "type": "workspaces",
                  "attributes": {
                    "name": "'"$WORKSPACE_NAME"'",
                    "terraform_version": "1.6.0",
                    "queue-all-runs": false,
                    "auto-apply-run-trigger": false,
                    "auto-apply": false,
                    "trigger-patterns": ["./*.tf"],
                    "file-triggers-enabled": true,
                    "working-directory": ".",
                    "speculative-enabled": false,
                    "structured-run-output-enabled": false,
                    "vcs-repo": {
                      "identifier": "rafaveloso23/'"$WORKSPACE_NAME"'",
                      "oauth-token-id": "ot-wA35FqioPs6EfhUi",
                      "tags-regex": "",
                      "branch": "main"
                    }
                  },
                  "relationships": {
                    "project": {
                      "data": {
                        "type": "projects",
                        "id": "prj-Q9eBYAsfU5yYxbBF"
                      }
                    }
                  }
                }
              }')

            WORKSPACE_ID=$(echo "$CREATE_RESPONSE" | jq -r '.data.id')
          fi

          # Save the workspace_id to GitHub Actions environment
          echo "workspace_id=$WORKSPACE_ID" >> "$GITHUB_ENV"


      - name: Read the value
        run: |
          echo "Workspace ID: $workspace_id"

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TEAM_TOKEN }}

      - name: Inject Terraform Cloud Backend Configuration
        env:
          WORKSPACE_NAME: ${{ needs.get-repo-name.outputs.sanitized_repo_name }}
        run: |
          cat <<EOF > backend.tf
          terraform {
            cloud {
              organization = "veloso"
              hostname     = "app.terraform.io"
          
              workspaces {
                project = "modules"
                name    = "$WORKSPACE_NAME"
              }
            }
          }
          EOF

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Plan
        run: terraform plan

      - name: Get config version
        run: |
            RESPONSE=$(curl -s -X GET "https://app.terraform.io/api/v2/workspaces/ws-7S6Tfv6djywXcdf3/configuration-versions" \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json")

            CV_ID=$(echo "$RESPONSE" | jq -r '.data[0].id')
            echo "CV_ID=$CV_ID" >> "$GITHUB_ENV"

      - name: Read the value
        run: |
          echo "CV ID: $CV_ID"

      # - name: Create a Run
      #   env:
      #     TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      #     TF_API_TEAM_TOKEN: ${{ secrets.TF_API_TEAM_TOKEN }}
      #     OAUTH_TOKEN: ${{ secrets.OAUTH_TOKEN }}
      #     WORKSPACE_NAME: ${{ needs.get-repo-name.outputs.sanitized_repo_name }}
      #   run: |
      #     curl -X POST "https://app.terraform.io/api/v2/organizations/veloso/workspaces" \
      #       -H "Authorization: Bearer $TF_API_TOKEN" \
      #       -H "Accept: application/json" \
      #       -H "Content-Type: application/vnd.api+json" \
      #       -d '{
      #         "data": {
      #         "attributes": {
      #           "message": "Custom message"
      #         },
      #         "type": "runs",
      #         "relationships": {
      #           "workspace": {
      #           "data": {
      #             "type": "workspaces",
      #             "id": "$workspace_id"
      #           }
      #           },
      #           "configuration-version": {
      #           "data": {
      #             "type": "configuration-versions",
      #             "id": "cv-n4XQPBa2QnecZJ4G"
      #           }
      #           }
      #         }
      #         }
      #       }'


