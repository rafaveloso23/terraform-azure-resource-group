name: Terraform API Request

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      publish:
        description: "Do you want to publish your Terraform module?"
        required: true
        default: "no"
        type: choice
        options:
          - "yes"
          - "no"

jobs:
  get-repo-name:
    runs-on: ubuntu-latest
    outputs:
      sanitized_repo_name: ${{ steps.sanitize_repo.outputs.sanitized_repo_name }}
    steps:
      - name: Extract and Sanitize Repository Name
        id: sanitize_repo
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          SANITIZED_NAME=$(echo "$REPO_NAME" | tr '.' '-')
          echo "sanitized_repo_name=$SANITIZED_NAME" >> "$GITHUB_OUTPUT"

  api_request:
    runs-on: ubuntu-latest
    needs: get-repo-name
    steps:
      - name: Check if workspace exists
        id: check_workspace
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          ORGANIZATION_NAME: veloso
          WORKSPACE_NAME: ${{ needs.get-repo-name.outputs.sanitized_repo_name }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/workspaces/$WORKSPACE_NAME" \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json")
          
          if [[ "$response" -eq 200 ]]; then
            echo "Workspace $WORKSPACE_NAME already exists."
            echo "exists=true" >> $GITHUB_ENV
          elif [[ "$response" -eq 404 ]]; then
            echo "Workspace $WORKSPACE_NAME does not exist, creating now."
            echo "exists=false" >> $GITHUB_ENV
          else
            echo "Error checking workspace status. Response code: $response"
            exit 1
          fi

      - name: Create a Workspace Terraform HCP
        if: ${{ env.exists == 'false' }}
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          OAUTH_TOKEN_ID: ${{ secrets.OAUTH_TOKEN_ID }}
          ORGANIZATION_NAME: veloso
          WORKSPACE_NAME: ${{ needs.get-repo-name.outputs.sanitized_repo_name }}
        run: |
          curl -X POST "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/workspaces" \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{
              "data": {
                "type": "workspaces",
                "attributes": {
                  "name": "'"$WORKSPACE_NAME"'",  
                  "terraform_version": "1.6.0",
                  "file-triggers-enabled": false,
                  "working-directory": "",
                  "vcs-repo": {
                    "identifier": "rafaveloso23/'"$WORKSPACE_NAME"'", 
                    "oauth-token-id": "'"$OAUTH_TOKEN_ID"'",
                    "tags-regex": "\\d+\\.\\d+\\.\\d+"
                  }
                },
                "relationships": {
                  "project": {
                    "data": {
                      "type": "projects",
                      "id": "prj-Q9eBYAsfU5yYxbBF"
                    }
                  }
                }
              }
            }'
          
      - name: Echo Workspace Access URL
        env:
          WORKSPACE_NAME: ${{ needs.get-repo-name.outputs.sanitized_repo_name }}
          ORGANIZATION_NAME: veloso
        run: |
          echo "The workspace for your repository has been successfully created."
          echo "You can now access the workspace VCS and initiate the plan to test your infrastructure code."
          echo ""
          echo "Workspace Access URL:"
          echo "https://app.terraform.io/app/${{ env.ORGANIZATION_NAME }}/workspaces/${{ env.WORKSPACE_NAME }}"
          echo ""
          echo "Please proceed with the necessary actions to validate your changes and trigger the execution."

  manual-approval:
    name: Manual Approval for Publishing Module
    runs-on: ubuntu-latest
    needs: api_request
    if: success()
    permissions:
      issues: write
    steps:
      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: rafaveloso23
          minimum-approvals: 1
          issue-title: "Manual Approval Required for Publishing Terraform Module"
          issue-body: "Please approve or deny the publishing of the Terraform module."

  publish-hcp-module:
    name: Publish Terraform Module
    runs-on: ubuntu-latest
    needs: manual-approval
    if: success()
    steps:
      - name: Conditional POST API Request to Publish Module
        env:
          TF_API_TEAM_TOKEN: ${{ secrets.TF_API_TEAM_TOKEN }}
          OAUTH_TOKEN_ID: ${{ secrets.OAUTH_TOKEN_ID }}
          ORGANIZATION_NAME: veloso
          WORKSPACE_NAME: ${{ needs.get-repo-name.outputs.sanitized_repo_name }}
        run: |
          # Prompt the user to decide whether to publish the Terraform module (true/false)
          PUBLISH_MODULE=true  # Set this to true or false based on your decision

          if [ "$PUBLISH_MODULE" = true ]; then
            echo "Publishing the Terraform module..."

            curl -X POST "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/registry-modules/vcs" \
              -H "Authorization: Bearer ${{ env.TF_API_TEAM_TOKEN }}" \
              -H "Accept: application/json" \
              -H "Content-Type: application/vnd.api+json" \
              -d '{
                "data": {
                  "attributes": {
                    "vcs-repo": {
                      "identifier": "rafaveloso23/'"$WORKSPACE_NAME"'", 
                      "oauth-token-id": "'"$OAUTH_TOKEN_ID"'",
                      "display_identifier": "rafaveloso23/'"$WORKSPACE_NAME"'", 
                      "branch": ""
                    },
                    "no-code": false
                  },
                  "type": "registry-modules"
                }
              }'
          else
            echo "Module publishing was skipped."
          fi