name: Terraform API Request

on:
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  get_repo_name:
    runs-on: ubuntu-latest
    outputs:
      sanitized_repo_name: ${{ steps.sanitize_repo.outputs.sanitized_repo_name }}
    steps:
      - name: Extract and Sanitize Repository Name
        id: sanitize_repo
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          SANITIZED_NAME=$(echo "$REPO_NAME" | tr '.' '-')
          echo "sanitized_repo_name=$SANITIZED_NAME" >> "$GITHUB_OUTPUT"

  create_workspace:
    outputs:
      sanitized_repo_name: ${{ needs.get_repo_name.outputs.sanitized_repo_name }}
    runs-on: ubuntu-latest
    needs: get_repo_name
    steps:
      - name: Check if workspace exists
        id: check_workspace
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          ORGANIZATION_NAME: veloso
          WORKSPACE_NAME: ${{ needs.get_repo_name.outputs.sanitized_repo_name }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/workspaces/$WORKSPACE_NAME" \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json")
          
          if [[ "$response" -eq 200 ]]; then
            echo "Workspace $WORKSPACE_NAME already exists."
            echo "exists=true" >> $GITHUB_ENV
          elif [[ "$response" -eq 404 ]]; then
            echo "Workspace $WORKSPACE_NAME does not exist, creating now."
            echo "exists=false" >> $GITHUB_ENV
          else
            echo "Error checking workspace status. Response code: $response"
            exit 1
          fi

      - name: Create a Workspace Terraform HCP
        if: ${{ env.exists == 'false' }}
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
          OAUTH_TOKEN_ID: ${{ secrets.OAUTH_TOKEN_ID }}
          ORGANIZATION_NAME: veloso
          WORKSPACE_NAME: ${{ needs.get_repo_name.outputs.sanitized_repo_name }}
        run: |
          curl -X POST "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/workspaces" \
            -H "Authorization: Bearer $TF_API_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{
              "data": {
                "type": "workspaces",
                "attributes": {
                  "name": "'"$WORKSPACE_NAME"'",  
                  "terraform_version": "1.6.0",
                  "file-triggers-enabled": false,
                  "working-directory": "",
                  "vcs-repo": {
                    "identifier": "rafaveloso23/'"$WORKSPACE_NAME"'", 
                    "oauth-token-id": "'"$OAUTH_TOKEN_ID"'",
                    "tags-regex": "\\d+\\.\\d+\\.\\d+"
                  }
                },
                "relationships": {
                  "project": {
                    "data": {
                      "type": "projects",
                      "id": "prj-Q9eBYAsfU5yYxbBF"
                    }
                  }
                }
              }
            }'

  terraform-cloud-speculative-run:
    needs: create_workspace
    outputs:
      sanitized_repo_name: ${{ needs.create_workspace.outputs.sanitized_repo_name }}
    runs-on: ubuntu-latest
    env:
      TF_API_TOKEN: ${{ secrets.TF_API_TEAM_TOKEN }}
      TF_CLOUD_ORGANIZATION: veloso
      TF_WORKSPACE: ${{ needs.create_workspace.outputs.sanitized_repo_name }}
      CONFIG_DIRECTORY: "./"
    steps:
      - run: ls ${{ env.CONFIG_DIRECTORY }}

      - uses: actions/checkout@v3

      - uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.2
        id: upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.2
        id: run
        ## run may fail, if so continue to output PR comment
        ## step.terraform-cloud-check-run-status will fail job after pr comment is created/updated.
        continue-on-error: true
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
          plan_only: true
          ## OPTIONAL: set your own message for run. A default message will be defined for you.
          ## Example:
          # message: "Triggered From GitHub Actions CI ${{ github.sha }}"

      - uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.2
        id: plan-output
        with:
          plan: ${{ steps.run.outputs.plan_id }}

      ## REQUIRED: Workflow permissions: `Read and write permissions`
      ## GITHUB_TOKEN is the built in token provided by GitHub Actions. It will need to be set to "permissive" in your repository settings
      ## More information can be found here: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
            })
            const output = `#### HCP Terraform Plan Output
               \`\`\`\n
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [HCP Terraform Plan](${{ steps.run.outputs.run_link }})
               `
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

        ## Check Run Status, if not planned_and_finished fail the job
      - id: terraform-cloud-check-run-status
        if: ${{ steps.run.outputs.run_status != 'planned_and_finished'}}
        run: |
          echo "HCP Terraform Run Failed or Requires Further Attention"
          echo "Run Status: '${{ steps.run.outputs.run_status }}'"
          echo "${{ steps.run.outputs.run_link }}"
          exit 1            