name: Add New Tag After Merge

on:
  pull_request:
    types:
      - closed
    branches:
      - main

permissions:
  contents: write

jobs:
  check_merge_status:
    runs-on: ubuntu-latest
    outputs:
      merged: ${{ steps.check_merge.outputs.merged }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get PR Merge Status
        id: check_merge
        run: |
          PR_MERGED_AT=$(gh pr view ${{ github.event.pull_request.number }} --json mergedAt -q .mergedAt || echo "")
          if [[ -n "$PR_MERGED_AT" ]]; then
            echo "merged=true" >> $GITHUB_ENV
            echo "merged=true" >> $GITHUB_OUTPUT
          else
            echo "merged=false" >> $GITHUB_ENV
            echo "merged=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  add_new_tag:
    name: Add New Tag
    runs-on: ubuntu-latest
    needs: check_merge_status
    if: ${{ needs.check_merge_status.outputs.merged == 'true' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
            LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "")
        
            # If no tag exists, set a default tag
            if [[ -z "$LATEST_TAG" ]]; then
              NEW_TAG="v1.0.0"
            else
              # Extract numbers safely
              TAG_VERSION="${LATEST_TAG#v}"  # Remove 'v' prefix if present
              IFS='.' read -r -a TAG_PARTS <<< "$TAG_VERSION"
        
              # Ensure we have at least three parts
              MAJOR=${TAG_PARTS[0]:-1}
              MINOR=${TAG_PARTS[1]:-0}
              PATCH=${TAG_PARTS[2]:-0}
        
              # Increment the PATCH version
              PATCH=$((PATCH + 1))
              NEW_TAG="v$MAJOR.$MINOR.$PATCH"
            fi
        
            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create and Push New Tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG

  check_module_exists:
    name: Check Module Exists
    runs-on: ubuntu-latest
    needs: add_new_tag
    steps:
      - name: Check if module exists
        id: check_module
        env:
          TF_API_TEAM_TOKEN: ${{ secrets.TF_API_TEAM_TOKEN }}
          ORGANIZATION_NAME: veloso
          MODULE_NAME: ${{ github.repository }}  # Full repo name (e.g., rafaveloso23/terraform-azure-resource-group)
        run: |
          # Extract module basename (e.g., "terraform-azure-resource-group" from "rafaveloso23/terraform-azure-resource-group")
          MODULE_BASENAME=$(echo "${MODULE_NAME}" | awk -F'/' '{print $2}')

          # Extract provider name (second part of "terraform-<provider>-<resource>")
          PROVIDER_NAME=$(echo "${MODULE_BASENAME}" | cut -d'-' -f2)

          # Extract resource name (third part of "terraform-<provider>-<resource>")
          RESOURCE_NAME=$(echo "${MODULE_BASENAME}" | cut -d'-' -f3-)

          echo "Extracted module name: $MODULE_BASENAME"
          echo "Extracted provider name: $PROVIDER_NAME"
          echo "Extracted resource name: $RESOURCE_NAME"

          echo "MODULE_BASENAME=$MODULE_BASENAME" >> $GITHUB_ENV
          echo "PROVIDER_NAME=$PROVIDER_NAME" >> $GITHUB_ENV
          echo "RESOURCE_NAME=$RESOURCE_NAME" >> $GITHUB_ENV

          # Check if module exists in Terraform Cloud
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/registry-modules/private/${{ env.ORGANIZATION_NAME }}/${{ env.RESOURCE_NAME }}/${{ env.PROVIDER_NAME }}" \
            -H "Authorization: Bearer $TF_API_TEAM_TOKEN" \
            -H "Accept: application/json")

          if [[ "$response" -eq 200 ]]; then
            echo "Module $RESOURCE_NAME already exists."
            echo "module_exists=true" >> $GITHUB_ENV
          elif [[ "$response" -eq 404 ]]; then
            echo "Module $RESOURCE_NAME does not exist, publishing now."
            echo "module_exists=false" >> $GITHUB_ENV
          else
            echo "Error checking module status. Response code: $response"
            exit 1
          fi




  publish_hcp_module:
    name: Publish Terraform Module
    runs-on: ubuntu-latest
    needs: check_module_exists
    steps:      
      - name: Conditional POST API Request to Publish Module
        if: env.module_exists == 'false'
        env:
          TF_API_TEAM_TOKEN: ${{ secrets.TF_API_TEAM_TOKEN }}
          OAUTH_TOKEN_ID: ${{ secrets.OAUTH_TOKEN_ID }}
          ORGANIZATION_NAME: veloso
          ORG_WORKSPACE_NAME: ${{ github.repository }}

        run: |
          curl -X POST "https://app.terraform.io/api/v2/organizations/${{ env.ORGANIZATION_NAME }}/registry-modules/vcs" \
            -H "Authorization: Bearer $TF_API_TEAM_TOKEN" \
            -H "Accept: application/json" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{
              "data": {
                "attributes": {
                  "vcs-repo": {
                    "identifier": "'"$ORG_WORKSPACE_NAME"'", 
                    "oauth-token-id": "'"$OAUTH_TOKEN_ID"'",
                    "display_identifier": "'"$ORG_WORKSPACE_NAME"'", 
                    "branch": ""
                  },
                  "no-code": false
                },
                "type": "registry-modules"
              }
            }'